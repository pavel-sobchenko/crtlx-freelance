{
  "root": true,
  "ignorePatterns": [
    "projects/**/*"
  ],
  "overrides": [
    {
      "files": [
        "*.ts"
      ],
      "parserOptions": {
        "project": [
          "tsconfig.json"
        ],
        "createDefaultProgram": true,
        "ecmaVersion": "latest"
      },
      "env": {
        "es6": true
      },
      "extends": [
        "plugin:@typescript-eslint/recommended",
        "plugin:@angular-eslint/all",
        "plugin:@angular-eslint/template/process-inline-templates"
      ],
      "rules": {
        "curly": [
          "error",
          "multi-line"
        ],
        "no-console": "warn",
        // Typescript
        "@typescript-eslint/adjacent-overload-signatures": "warn",
        "@typescript-eslint/await-thenable": "error",
        "@typescript-eslint/consistent-indexed-object-style": "error",
        "default-param-last": "off",
        "@typescript-eslint/default-param-last": "error",
        "dot-notation": "off",
        "@typescript-eslint/dot-notation": "warn",
        "@typescript-eslint/explicit-function-return-type": [
          "error",
          {
            "allowExpressions": true
          }
        ],
        "@typescript-eslint/explicit-member-accessibility": [
          "error",
          {
            "accessibility": "explicit",
            "overrides": {
              "constructors": "no-public"
            }
          }
        ],
        "@typescript-eslint/explicit-module-boundary-types": "error",
        "func-call-spacing": "off",
        "@typescript-eslint/func-call-spacing": "error",
        "@typescript-eslint/method-signature-style": [
          "error",
          "method"
        ],
        "no-array-constructor": "off",
        "@typescript-eslint/no-array-constructor": "error",
        "@typescript-eslint/no-confusing-non-null-assertion": "error",
        "no-duplicate-imports": "off",
        "@typescript-eslint/no-duplicate-imports": "error",
        "no-empty-function": "off",
        "@typescript-eslint/no-empty-function": "error",
        "@typescript-eslint/no-extra-non-null-assertion": "error",
        "@typescript-eslint/no-for-in-array": "error",
        "@typescript-eslint/no-implied-eval": "error",
        "@typescript-eslint/no-inferrable-types": "error",
        "@typescript-eslint/no-extra-parens": [
          "error",
          "functions"
        ],
        "no-loop-func": "off",
        "@typescript-eslint/no-loop-func": "warn",
        "no-loss-of-precision": "off",
        "@typescript-eslint/no-loss-of-precision": "warn",
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-misused-promises": [
          "error",
          {
            "checksVoidReturn": false
          }
        ],
        "@typescript-eslint/no-namespace": "error",
        "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
        "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
        "@typescript-eslint/no-non-null-assertion": "error",
        "no-redeclare": "off",
        "@typescript-eslint/no-redeclare": "error",
        "no-shadow": "off",
        "@typescript-eslint/no-shadow": "error",
        "no-throw-literal": "off",
        "@typescript-eslint/no-throw-literal": "error",
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
        "@typescript-eslint/no-unnecessary-type-arguments": "warn",
        "@typescript-eslint/no-unnecessary-type-assertion": "warn",
        "@typescript-eslint/no-unnecessary-type-constraint": "warn",
        "@typescript-eslint/no-unsafe-argument": "error",
        "@typescript-eslint/no-unsafe-assignment": "error",
        "@typescript-eslint/no-unsafe-call": "error",
        "@typescript-eslint/no-unsafe-member-access": "error",
        "no-unused-expressions": "off",
        "@typescript-eslint/no-unused-expressions": [
          "error",
          {
            "allowShortCircuit": true
          }
        ],
        "no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": [
          "error",
          {
            "argsIgnorePattern": "_"
          }
        ],
        "no-useless-constructor": "off",
        "@typescript-eslint/no-useless-constructor": "error",
        "@typescript-eslint/non-nullable-type-assertion-style": "warn",
        "object-curly-spacing": "off",
        "@typescript-eslint/object-curly-spacing": [
          "error",
          "always"
        ],
        "@typescript-eslint/prefer-for-of": "error",
        "@typescript-eslint/prefer-function-type": "warn",
        "@typescript-eslint/prefer-includes": "error",
        "@typescript-eslint/prefer-optional-chain": "error",
        "@typescript-eslint/prefer-readonly": "error",
        "@typescript-eslint/prefer-reduce-type-parameter": "error",
        "@typescript-eslint/prefer-regexp-exec": "error",
        "@typescript-eslint/prefer-return-this-type": "error",
        "@typescript-eslint/prefer-string-starts-ends-with": "error",
        "@typescript-eslint/prefer-ts-expect-error": "error",
        "@typescript-eslint/promise-function-async": [
          "error",
          {
            "checkArrowFunctions": false
          }
        ],
        "@typescript-eslint/restrict-plus-operands": "warn",
        "@typescript-eslint/restrict-template-expressions": "error",
        "no-return-await": "off",
        "@typescript-eslint/return-await": [
          "error",
          "never"
        ],
        "space-before-function-paren": [
          "error",
          {
            "named": "never"
          }
        ],
        "space-infix-ops": "off",
        "@typescript-eslint/space-infix-ops": "error",
        "@typescript-eslint/switch-exhaustiveness-check": "warn",
        "@typescript-eslint/type-annotation-spacing": "warn",
        "@typescript-eslint/unified-signatures": "error",
        "@typescript-eslint/array-type": [
          "error",
          {
            "default": "array-simple"
          }
        ],
        "@typescript-eslint/ban-ts-comment": [
          "error",
          {
            "ts-ignore": "allow-with-description",
            "ts-nocheck": "allow-with-description",
            "ts-expect-error": "allow-with-description",
            "ts-check": false,
            "minimumDescriptionLength": 30
          }
        ],
        "@typescript-eslint/ban-types": [
          "error",
          {
            "types": {
              "Object": {
                "message": "The `Object` type actually means \"any non-nullish value\", so it is marginally better than `unknown`., \n- If you want a type meaning \"any object\", you probably want `Record<string, unknown>` instead, \n- If you want a type meaning \"any value\", you probably want `unknown` instead.",
                "fixWith": "Record<string, unknown>"
              },
              "{}": {
                "message": "The `{}` type actually means \"any non-nullish value\", so it is marginally better than `unknown`., \n- If you want a type meaning \"any object\", you probably want `Record<string, unknown>` instead, \n- If you want a type meaning \"any value\", you probably want `unknown` instead.",
                "fixWith": "Record<string, unknown>"
              },
              "Function": {
                "message": "Use `() => unknown` or explicit function shape instead",
                "fixWith": "() => unknown"
              }
            }
          }
        ],
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "memberLike",
            "modifiers": [
              "private"
            ],
            "format": [
              "camelCase"
            ]
          },
          {
            "selector": [
              "classProperty"
            ],
            "modifiers": [
              "private",
              "static",
              "readonly"
            ],
            "format": [
              "UPPER_CASE"
            ],
            "leadingUnderscore": "forbid"
          }
        ],
        "@typescript-eslint/no-empty-interface": [
          "error",
          {
            "allowSingleExtends": false
          }
        ],
        "@typescript-eslint/no-explicit-any": [
          "error",
          {
            "fixToUnknown": true
          }
        ],
        // Angular
        "@angular-eslint/no-pipe-impure": "warn",
        "@angular-eslint/no-empty-lifecycle-method": "off",
        "@angular-eslint/no-output-native": "off",
        "@angular-eslint/prefer-on-push-component-change-detection": "warn",
        "@angular-eslint/use-component-selector": "off",
        "@angular-eslint/no-host-metadata-property": "off",
        "@angular-eslint/use-component-view-encapsulation": "off",
        "@angular-eslint/use-injectable-provided-in": "off",
        "@angular-eslint/pipe-prefix": "off",
        "@angular-eslint/no-forward-ref": "off",
        "@angular-eslint/directive-selector": [
          "warn",
          {
            "type": "attribute",
            "style": "kebab-case"
          }
        ],
        "@angular-eslint/component-selector": [
          "warn",
          {
            "prefix": [
              "app",
              "vlt"
            ],
            "style": "kebab-case"
          }
        ],
        "@angular-eslint/component-max-inline-declarations": [
          "error",
          {
            "template": 1
          }
        ],
        "@angular-eslint/no-input-prefix": [
          "error",
          {
            "prefixes": [
              "on",
              "is",
              "has",
              "had",
              "was",
              "been"
            ]
          }
        ]
      }
    },
    {
      "files": [
        "*.html"
      ],
      "extends": [
        "plugin:@angular-eslint/template/all"
      ],
      "rules": {
        "@angular-eslint/template/no-negated-async": "off",
        "@angular-eslint/template/eqeqeq": [
          "error",
          {
            "allowNullOrUndefined": true
          }
        ],
        "@angular-eslint/template/no-any": "off",
        "@angular-eslint/template/click-events-have-key-events": "warn",
        "@angular-eslint/template/i18n": "off",
        "@angular-eslint/template/no-autofocus": "off",
        "@angular-eslint/template/use-track-by-function": "off",
        "@angular-eslint/template/cyclomatic-complexity": "off",
        "@angular-eslint/template/conditional-complexity": [
          "warn",
          {
            "maxComplexity": 3
          }
        ],
        "@angular-eslint/template/no-inline-styles": "off"
      }
    }
  ]
}
